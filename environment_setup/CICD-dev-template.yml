# This is a basic workflow to help you get started with Actions

name: CICD-dev
# Controls when the workflow will run
on:
  # Triggers the workflow on push events but only for the development branch
  push:
    branches: [ development ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a two jobs called "CI" and "CD"
  CI:
    # The type of runner that the job will run on
    runs-on: ubuntu-latest

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it and sets up Python
      - uses: actions/checkout@v3
      # Set up Python
      - uses: actions/setup-python@v3
        with:
          python-version: '3.7'
          architecture: 'x64'
      # Set up pip
      - run: |
          python -m pip install --upgrade pip==21.3.1
      # Code quality check
      - name: Code quality check
        run: |
          pip install flake8
          pip install flake8_formatter_junit_xml
          flake8 --exit-zero .
      # Archive notebook scripts
      - name: Archive OPS files
        uses: actions/upload-artifact@v3
        with:
          name: opsscripts
          path: scripts/
  CD:
    needs: CI
    runs-on: ubuntu-latest
    
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it and sets up Python
      - uses: actions/checkout@v3
      # Set up Python
      - uses: actions/setup-python@v3
        with:
          python-version: '3.7'
          architecture: 'x64'
      # Install pip and install requirements for the release python file
      - run: |
          python -m pip install --upgrade pip
          pip install -r "./environment_setup/requirements.txt"
      # Deploy notebooks using a Python file 
      - name: Deploy notebooks to workspace
      ## TODO: In order to deploy the notebooks to databricks, the generated token and organisation url of databricks need to be used as environment variables here
      ## TODO: add two environment variables DBX_TOKEN and DBX_ORG_URL to this section. 
      ## TODO: DBX_TOKEN should have ${{secrets.DBX_TOKEN}} as value. DBX_ORG_URL should have ${{secrets.DBX_ORG_URL}} as value
      # Set token and url as environment variables
        env:
          env1_to_be_added: value1_to_be_added
          env2_to_be_added: value2_to_be_added 
      # Run the Python script
        run: |
          python db_service/notebooks_to_db_dev.py -source_path "./scripts" -target_path "/Development/scripts" -dbx_api_token $DBX_TOKEN -dbx_ws_url $DBX_ORG_URL
